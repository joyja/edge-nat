scalar Datetime

type NetworkInterfaceConfig {
  name: String
  dhcp4: Boolean
  addresses: [String!]
  gateway4: String
}

type NetworkInterface {
  id: String
  name: String
  alias: String
  mtu: String
  state: String
  macAddress: String
  ipAddresses: [String!]!
  gateway: String
}

type DeployUpdateStatus {
  progress: Int
  lastUpdateAt: Datetime
  error: String
}

type NatRule {
  """iptables SNAT rule line number. Null if DNAT only."""
  snatLine: Int
  """iptables DNAT rule line number."""
  dnatLine: Int!
  """incoming destination address to which to apply the DNAT rule."""
  incomingDestAddress: String!
  """outgoing source address that will be applied via SNAT to the DNAT packets (optional)."""
  outgoingSourceAddress: String
  """outgoing destination address that the DNAT packets will be sent to."""
  outgoingDestAddress: String!
}

"""Read only queries"""
type Query {
  """Gives some information about this application."""
  info: String!
  """List of iptables rules"""
  natRules: [NatRule!]!
  """List of network interfaces"""
  networkInterfaces: [NetworkInterface!]!
  """List of network interface configurations"""
  networkInterfaceConfigs: [NetworkInterfaceConfig!]!
  deployUpdateStatus: DeployUpdateStatus
}

"""Write requests"""
type Mutation {
  createRule(
    incomingDestAddress: String!
    outgoingSourceAddress: String
    outgoingDestAddress: String!
  ): NatRule
  deleteRule(
    dnatLine: Int!
    snatLine: Int
  ): NatRule
  setInterfaceConfig(
    name: String!,
    dhcp: Boolean!,
    addresses: [String!]!
    gateway: String  
  ): NetworkInterface
  deployUpdate: DeployUpdateStatus
}

"""Web socket updates"""
type Subscription {
  """to get polled iptables updates."""
  iptablesUpdate: String
  deployUpdateStatus: DeployUpdateStatus
}